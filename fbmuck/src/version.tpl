/*
 * Copyright (c) 1991-2015 by Fuzzball Software
 * under the GNU Public License
 *
 * Some parts of this code Copyright (c) 1990 Chelsea Dyerman
 * University of California, Berkeley (XCF)
 */

/*
 * This file is generated by mkversion. Any changes made will go away.
 */

#include "fb.h"
#include "config.h"
#include "params.h"
#include "externs.h"

#define generation "$generation"
#define creation "$creation"
$gitavail
#ifdef DEBUG
#define debug "Debug Version, assertions enabled"
#else
#define debug ""
#endif

typedef struct hash_file_entry {
	const char *filename;
	const char *githash;
	const char *sha1hash;
} hash_file_entry;

hash_file_entry hash_file_array[] = {
$hasharray
	{ NULL, NULL, NULL }
};

void
do_version(dbref player)
{
	char s[BUFFER_LEN];

	snprintf(s,BUFFER_LEN,"Version: %s(%s) Compiled on: %s %s", VERSION, generation, creation, debug);
	notify(player, s);
}

void
do_hashes(dbref player, char *args) {
	char s[BUFFER_LEN];
	hash_file_entry *entry;
	int b_git = 0, b_sha1 = 0;
	const char *filename;

	if (!args || !*args)
	{
#ifdef GIT_AVAILABLE
		notify(player, "usage: @hashes [all|git|sha1]");
#else
		notify(player, "usage: @hashes [all|sha1]");
#endif
		notify(player, "Show hashes calculated for source files at compile time");
		notify(player, "");
		notify(player, "all   - Show all available hashes");
#ifdef GIT_AVAILABLE
		notify(player, "git   - Show only the git hash (if available)");
#endif
		notify(player, "sha1  - Show only the sha1 hash");
		return;
	}

	/* What hashes to display? */
	if (!strcasecmp(args, "git")) {
		b_git = 1;
	} else if (!strcasecmp(args, "sha1")) {
		b_sha1 = 1;
	} else {
		b_git = b_sha1 = 1;
	}

	/* Header */
	notify(player, "File            Hash");

	entry = hash_file_array;
	while (entry && entry->filename) {
		filename = entry->filename;

		if (b_sha1 && entry->sha1hash) {
			snprintf(s, BUFFER_LEN, "%-15s %s (sha1)", filename, entry->sha1hash);
			notify(player, s);
			filename = "";
		}

		if (b_git && entry->githash) {
			snprintf(s, BUFFER_LEN, "%-15s %s (git)", filename, entry->githash);
			notify(player, s);
		}

		entry++;
	}
}

