#!/bin/make -f
# @configure_input@

# #######################################################################
#                  Makefile for TinyMUCK 2.2fb7
# #######################################################################

# #######################################################################
#			User tunable options
# #######################################################################

#
# Prepend line.  used for compiling with things like nice.
#
# PRE= nice -10

#
# Optimizations
# -O                General optimizations, reccomended.
# -O2               Heavier optimizations, use at own risk.
# -g                Generate debugging information, suggested, you can
#                     always "strip fbmuck" if you want the space.
# -pg               Generate profiling debug code.  Use with gprof.
# -Wall -pedantic	Good way to get spammed with warnings from GCC.
# -ftest-coverage -fprofile-arcs  Generate test coverage debug code for gcov.
#
OPTIM=

#
# Paths
#

# Right below the src/include directories
ROOT= ..

# Where the include files are
INCLUDE= ${ROOT}/include

# The root of the directory tree to install to.
prefix=@prefix@
datarootdir=@datarootdir@
exec_prefix=@exec_prefix@
# Destinations for binaries
INSTALL_BINDIR=@bindir@
INSTALL_SBINDIR=@sbindir@
# Destination for helpfiles
INSTALL_HELPDIR=@datadir@/fbmuck
# Destination for starter databases
INSTALL_DBSDIR=@datadir@/fbmuck/starter_dbs

# ${DESTDIR} is used by the Debian packaging system to build the .debs
# and is defined by the debian/rules file.

# The game binaries should go into /usr/lib/fbmuck as they are meant
# to be called by the startup scripts and generally not manually.

###INSTALL_BINDIR= ${DESTDIR}/usr/lib/fbmuck/fb60/bin

# The default 2-object and 68-object game dbs should be considered
# 'example documentation' and go into /usr/share/doc/fbmuck/examples
# and be stored as compressed tarfiles.

# #######################################################################
# 		Variables set by the configure script.
# #######################################################################
INSTALL=@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_SCRIPT=@INSTALL_SCRIPT@
INSTALL_DATA=@INSTALL_DATA@

CC=@CC@
CPP=@CPP@
DEFS=@DEFS@
LIBR=@LIBS@
INCL=-I${INCLUDE} @INC@

# #######################################################################
#  	   Usualy don't need to change anything past here.
# #######################################################################

#
# Include path, Cflags...
#
CFLAGS=@CFLAGS@ ${OPTIM}

#
# for saving old copies.
#
MV= mv -f
CP= cp -f
RM= rm -f
CHMOD= chmod

#
# Misc stuff for odd targets.
#
SRC_PREFIX=
MKDEPEND= makedepend
MAKE= make
LINT= @LINT@
MKTAGS= ctags --c-types=-m
# for RCS only
GET= co
LINTFLAGS= ${INCL}

##########################################################################
#            You should not have to change anything below here           #
##########################################################################

MALLSRC= crt_malloc.c
MALLOBJ= crt_malloc.o

MISCSRC= Makefile.in

CSRC= array.c boolexp.c compile.c create.c db.c debugger.c diskprop.c edit.c \
	events.c fbmath.c fbsignal.c fbstrings.c fbtime.c game.c hashtab.c help.c \
	interface_ssl.c interp.c log.c look.c match.c mcp.c mcpgui.c \
	mcppkgs.c mfuns.c mfuns2.c move.c msgparse.c mufevent.c p_array.c \
	p_connects.c p_db.c p_error.c p_float.c p_math.c p_mcp.c p_misc.c \
	p_props.c p_regex.c p_stack.c p_strings.c player.c predicates.c \
	propdirs.c property.c props.c rob.c sanity.c set.c sha1.c speech.c \
	timequeue.c tune.c wiz.c

MSRC= interface.c resolver.c

COBJ= array.o boolexp.o compile.o create.o db.o debugger.o diskprop.o edit.o \
	events.o fbmath.o fbsignal.o fbstrings.o fbtime.o game.o hashtab.o help.o \
	interface_ssl.o interp.o log.o look.o match.o mcp.o mcpgui.o \
	mcppkgs.o mfuns.o mfuns2.o move.o msgparse.o mufevent.o p_array.o \
	p_connects.o p_db.o p_error.o p_float.o p_math.o p_mcp.o p_misc.o \
	p_props.o p_regex.o p_stack.o p_strings.o player.o predicates.o \
	propdirs.o property.o props.o rob.o sanity.o set.o sha1.o speech.o \
	timequeue.o tune.o wiz.o

MOBJ= interface.o resolver.o

SRC= ${MISCSRC} ${CSRC} ${MSRC}
OBJ= ${COBJ} ${ROBJ} ${MOBJ}

TARGETS= fbmuck fb-resolver prochelp
OLDTARGETS = fbmuck~ fb-resolver~ prochelp~
HELPFILES= man.txt help.txt mpihelp.txt

.c.o:
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -c $*.c

.c.cpp:
	${PRE} ${CPP} ${CFLAGS} ${INCL} ${DEFS} -c $*.c -o $*.cpp

all: $(INCLUDE)/defines.h ${TARGETS} 

$(INCLUDE)/defines.h:
	@echo Creating $(INCLUDE)/defines.h...
	@echo '/* This file is automatically generated by make. */' > $(INCLUDE)/defines.h
	@echo "#define BINDIR \"$(INSTALL_BINDIR)\"" >> $(INCLUDE)/defines.h
	@echo "#define INSTALL_HELPDIR \"$(INSTALL_HELPDIR)\"" >> $(INCLUDE)/defines.h

version.c:
	mkversion version.tpl ${COBJ}

fbmuck: $(INCLUDE)/defines.h ${P} ${COBJ} ${MALLOBJ} interface.o Makefile
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -o mkversion mkversion.c sha1.c
	./mkversion
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -c version.c
	if [ -f fbmuck ]; then ${MV} fbmuck fbmuck~ ; fi
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -o fbmuck ${COBJ} ${MALLOBJ} interface.o version.o \
	  ${LIBR}

fb-resolver: resolver.o ${MALLOBJ} Makefile
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -o fb-resolver resolver.o ${MALLOBJ} ${LIBR} -lpthread

prochelp: prochelp.o Makefile
	${PRE} ${CC} ${CFLAGS} ${INCL} ${DEFS} -o prochelp prochelp.o

#############################################################
# Funky stuff for debugging and coding work.
#

saber_src:
	#load ${CFLAGS} ${INCL} ${DEFS} ${CSRC}

saber_obj: ${CSRC} interface.o
	#load ${OBJ} interface.o

tags: ${CSRC} ${MSRC} ${MALLSRC}
	${MKTAGS} ${CSRC} ${MALLSRC} interface.c ../include/*.h

lint: ${CSRC} ${MSRC} ${MALLSRC} ${INCLUDE}/defines.h
	-${RM} fbmuck.lint
	-${LINT} ${LINTFLAGS} ${CSRC} ${MSRC} ${MALLSRC} > fbmuck.lint

${SRC}:
	${GET} $@

${MALLSRC}:
	${GET} $@

sources: ${MALLSRC} ${SRC}

names:
	@for i in ${SRC} ${MALLSRC}; do echo ${SRC_PREFIX}$$i; done

depend:
	${MKDEPEND} -- ${CFLAGS} ${INCL} ${DEFS} -- ${CSRC} ${MALLSRC} ${MSRC}
	echo chmod -w Makefile
	chmod -w Makefile

Makefile: Makefile.in
	cd .. && ./config.status
	@echo " "
	@echo Please re-run make, as the Makefile was re-generated.

########################################################
# Cleanup stuff.
#

clean:
	-${RM} ${OBJ} core version.o mkversion.o ${SOBJ} ${MALLOBJ} resolver.o ${TARGETS} ${OLDTARGETS} prochelp.o

cleaner: clean
	-${RM} Makefile config.status config.cache config.log ${INCLUDE}/autoconf.h ${TARGETS} version.c mkversion ${INCLUDE}/defines.h

distclean: cleaner

clobber: cleaner
	-${RM} tags *~ *.bak *.orig

nuke: distclean
	-${RM} ${OBJ} core version.o mkversion.o
	-${RM} ${TARGETS} tags *~ *.bak *.orig
	-${RM} Makefile config.status ${INCLUDE}/autoconf.h

install: all
	${INSTALL} -d ${INSTALL_BINDIR}
	${INSTALL_PROGRAM} ${TARGETS} ${INSTALL_BINDIR}
	${INSTALL} -d ${INSTALL_HELPDIR}
	cd ../game/data && ${INSTALL_DATA} ${HELPFILES} ${INSTALL_HELPDIR}
	${INSTALL_SCRIPT} ../game/restart ${INSTALL_HELPDIR}/restart-script
	@echo " "
	@echo "You may run 'make install-sysv-inits' to install SysV style init scripts."
	@echo " "

# FIXME: Implement fb-addmuck
# FIXME: Check base and minimal dbs into CVS as unpacked file trees under dbs/
# FIXME: Create man pages for fbmuck, fb-addmuck

install-sysv-inits: all
	-[ -f /etc/fbmucks ] || echo "#MUCKNAME   USERNAME    MUCK_ROOT_PATH           SCRIPTNAME  PORTS" > /etc/fbmucks
	-[ -f /etc/redhat-release ] && ${INSTALL_SCRIPT} ../scripts/fbmuck-redhat-init /etc/rc.d/init.d/fbmuck
	-[ ! -f /etc/redhat-release ] && ${INSTALL_SCRIPT} ../scripts/fbmuck-sysvinit /etc/rc.d/init.d/fbmuck
	-chkconfig --add fbmuck || ( \
		for d in 0 1 2 3 4 5 6; do rm -f /etc/rc.d/rc$$d.d/S??fbmuck; done ; \
		for d in 0 1 2 3 4 5 6; do rm -f /etc/rc.d/rc$$d.d/K??fbmuck; done ; \
		for d in 0 1         6; do ln -s ../init.d/fbmuck /etc/rc.d/rc$$d.d/K23fbmuck; done ; \
		for d in     2 3 4 5  ; do ln -s ../init.d/fbmuck /etc/rc.d/rc$$d.d/S82fbmuck; done ; \
	)

#	${INSTALL} -d ${INSTALL_SBINDIR}
#	${INSTALL_SCRIPT} ../scripts/fb-addmuck ${INSTALL_SBINDIR}
#
#	${INSTALL} -d ${INSTALL_DBSDIR}
#	for d in minimal base; do \
#		cd dbs/${d} && tar cf ${INSTALL_DBSDIR}/${d}db.tar *; \
#		gzip ${INSTALL_DBSDIR}/${d}db.tar; \
#	done

# #######################################################################
# #######################################################################

# DO NOT DELETE THIS LINE -- make depend depends on it.
