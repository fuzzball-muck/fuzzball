- name: link
  setup: |
    @dig IdTwo
    @open foo;bar=#2=property
  commands: | 
    ex me=_reg/property
    ex bar
  expect:
    - "Destination: IdTwo.*"
    - "- ref /_reg/property:foo;bar\\(#3"

- name: link-multilink
  setup: |
    @dig IdTwo
    @create IdThree
    @open foo;bar=#2;#3=property
  commands: |
    ex bar
    ex me=_reg/property
  expect:
    - "Destination: IdTwo.*"
    - "Destination: IdThree.*"
    - "- ref /_reg/property:foo;bar\\(#4"

- name: clone
  setup: |
    @create Foo
    @desc Foo={null:to preserve}
    @propset Foo=dbref:~protectedprop:#0
    @propset Foo=lock:_lockprop:me
    @set Foo=@secretprop:secretvalue
    @set Foo=_proplist/a:foo
    @set Foo=_proplist/b:bar
    @clone Foo
  commands: |
    ex #3
    ex #3=/
    ex #3=_proplist/
  expect:
    - "Type: THING"
    - "Foo\\(#3"
    - "{null:to preserve}"
    - "- str /@secretprop:secretvalue"
    - "- ref /~protectedprop:Room Zero"
    - "- lok /_lockprop:One"
    - "- str /_proplist/a:foo"
    - "- str /_proplist/b:bar"

- name: attach
  commands: |
    @act foo=me
    @attach foo=#0
    ex foo
  expect: |
    Source: Room Zero.*

- name: dig-simple
  setup: |
    @dig IdTwo
  commands: |
    ex #2
  expect:
    - "IdTwo\\(#2"
    - "Type: ROOM"

- name: dig-parent
  setup: |
    @dig IdTwo==regtwo
    @dig IdThree=$regtwo=regthree
  commands: |
    ex $regthree
  expect:
    - "IdThree\\(#3"
    - "Parent: IdTwo"
    - "Type: ROOM"

- name: dig-fail-badparent
  commands: |
    @dig IdTwo=badbadbad=regtwo
    ex $regtwo
  expect:
    - "I don't understand 'bad"
    - "Parent: Room Zero"

- name: dig-fail-formatstringparent
  comment: regression for pull request 540
  commands: |
    @dig IdTwo=%n%n%n%n%n%n%n=regtwo
    ex $regtwo
  expect:
    - "I don't understand '%n"
    - "Parent: Room Zero"

- name: program-ambiguous
  setup: |
    @program Foo program 1.muf
    q
    @program Foo program 2.muf
    q
  commands: |
    @program Foo
  expect:
    - "I don't know which 'Foo'"

- name: program-ambiguous-fmtstring
  setup: |
    @program %n%n%n program 1.muf
    q
    @program %n%n%n program 2.muf
    q
  commands: |
    @program %n%n%n
  expect:
    - "I don't know which '%n%n%n'"
